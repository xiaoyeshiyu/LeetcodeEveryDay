本文将按照 [动态规划入门：从记忆化搜索到递推](https://www.bilibili.com/video/BV1Xj411K7oF/)，从回溯开始，教大家一步步写出最后的递推代码。（APP 用户需要分享到 wx 打开视频链接）

# 第一步：思考回溯怎么写

游戏规则：「以谁手中的石子最多来决出胜负」。

在示例 1 中，Alice 一开始有两个选择：拿前一堆/前两堆石子。如果 Alice 拿前一堆，那么轮到 Bob 时，他也可以在剩下的四堆石子中，拿前一堆/前两堆石子。如果 Bob 拿前一堆，那么又轮到 Alice，……

不断这样思考下去，可以画出如下搜索树。注意如果可以全部拿完，就全拿。

![1140.png](https://pic.leetcode.cn/1676982829-lcXKKW-1140.png)

根据上图，定义 $\textit{dfs}(i,M)$ 表示从 $\textit{piles}[i]$ 开始拿石子，可以得到的最大石子数。$M$ 的含义同题目描述。

对于每个节点，由于剩余的石子总数是固定的，如果拿了某几堆石子后，**对手能得到的石子数最少**，那么自己能得到的石子数就是最多的。

这就是「发挥出最佳水平」的含义：Alice 和 Bob 都在大气层。如果你一层层想下去想晕了，可以看我的[【基础算法精讲 09】](https://www.bilibili.com/video/BV1UD4y1Y769/)来缓解。

定义后缀和 $s[i] = \sum\limits_{j=i}^{n-1}\textit{piles}[j]$，则有

$$
\textit{dfs}(i,M) = s[i] - \min_{X=1}^{2M}\textit{dfs}(i+X,\max(M,X))
$$

答案为 $\textit{dfs}(0,1)$。

* [sol1-Python3]

```py
# 尚未优化，会超时
class Solution:
    def stoneGameII(self, s: List[int]) -> int:
        n = len(s)
        for i in range(n - 2, -1, -1):
            s[i] += s[i + 1]  # 后缀和

        def dfs(i: int, m: int) -> int:
            if i + m * 2 >= n:  # 能全拿
                return s[i]
            return s[i] - min(dfs(i + x, max(m, x)) for x in range(1, m * 2 + 1))
        return dfs(0, 1)
```

* [sol1-Java]

```java
// 尚未优化，会超时
class Solution {
    private int[] s;

    public int stoneGameII(int[] piles) {
        s = piles;
        int n = s.length;
        for (int i = n - 2; i >= 0; --i)
            s[i] += s[i + 1]; // 后缀和
        return dfs(0, 1);
    }

    private int dfs(int i, int m) {
        if (i + m * 2 >= s.length) return s[i];
        int mn = Integer.MAX_VALUE;
        for (int x = 1; x <= m * 2; ++x)
            mn = Math.min(mn, dfs(i + x, Math.max(m, x)));
        return s[i] - mn;
    }
}
```

* [sol1-C++]

```cpp
// 尚未优化，会超时
class Solution {
public:
    int stoneGameII(vector<int> &s) {
        int n = s.size();
        for (int i = n - 2; i >= 0; --i)
            s[i] += s[i + 1]; // 后缀和

        function<int(int, int)> dfs = [&](int i, int m) -> int {
            if (i + m * 2 >= n) return s[i];
            int mn = INT_MAX;
            for (int x = 1; x <= m * 2; ++x)
                mn = min(mn, dfs(i + x, max(m, x)));
            return s[i] - mn;
        };
        return dfs(0, 1);
    }
};
```

* [sol1-Go]

```go
// 尚未优化，会超时
func stoneGameII(s []int) int {
    n := len(s)
    for i := n - 2; i >= 0; i-- {
        s[i] += s[i+1] // 后缀和
    }
    var dfs func(int, int) int
    dfs = func(i, m int) int {
        if i+m*2 >= n {
            return s[i]
        }
        mn := math.MaxInt
        for x := 1; x <= m*2; x++ {
            mn = min(mn, dfs(i+x, max(m, x)))
        }
        return s[i] - mn
    }
    return dfs(0, 1)
}

func min(a, b int) int { if b < a { return b }; return a }
func max(a, b int) int { if b > a { return b }; return a }
```

# 第二步：改成记忆化搜索

举个例子，「Alice 拿一堆，Bob 拿两堆」和「Alice 拿两堆，Bob 拿一堆」，都会递归到 $\textit{dfs}(3,2)$。

一叶知秋，整个回溯过程是有大量重复递归调用的。由于递归函数没有副作用，无论调用 $\textit{dfs}(i,M)$ 多少次，算出来的结果都是一样的，因此可以用**记忆化搜索**来优化：

- 如果一个状态（递归入参）是第一次遇到，那么可以在返回前，把状态及其结果记到一个 $\textit{cache}$ 数组（或者哈希表）中；
- 如果一个状态不是第一次遇到，那么直接返回 $\textit{cache}$ 中保存的结果。

### 答疑

**问**：我要用二维数组记录的话，第二个维度开多大空间比较合适？或者说，**需要被记忆化的** $M$ 的上界是多少？

**答**：两人交替拿石子，为了在 $i$ 尽量小的情况下，使 $M$ 尽量大，那么每次都拿满 $2M$ 堆，最后有 $(2+4+8+\cdots+M)+2M<n$，即 $4M-2<n$，亦为 $4M\le n+1$，这样算的话 $M$ 的上界为 $\left\lfloor\dfrac{n+1}{4}\right\rfloor$。注意后面可以根据 $n$ 来调整，不一定要拿满 $2M$，比如 $n=12$ 时，可以第一轮拿 $2$ 堆，第二轮拿 $3$ 堆，此时 $2+3+2\cdot 3=11<12$，那么 $M$ 最大为 $3$。

总而言之，**需要被记忆化的** $M$ 的上界为 $\left\lfloor\dfrac{n+1}{4}\right\rfloor$。

* [sol2-Python3]

```py
class Solution:
    def stoneGameII(self, s: List[int]) -> int:
        n = len(s)
        for i in range(n - 2, -1, -1):
            s[i] += s[i + 1]  # 后缀和

        @cache
        def dfs(i: int, m: int) -> int:
            if i + m * 2 >= n:  # 能全拿
                return s[i]
            return s[i] - min(dfs(i + x, max(m, x)) for x in range(1, m * 2 + 1))
        return dfs(0, 1)
```

* [sol2-Java]

```java
class Solution {
    private int[][] cache;
    private int[] s;

    public int stoneGameII(int[] piles) {
        s = piles;
        int n = s.length;
        for (int i = n - 2; i >= 0; --i)
            s[i] += s[i + 1]; // 后缀和

        cache = new int[n - 1][(n + 1) / 4 + 1];
        for (int i = 0; i < n - 1; i++)
            Arrays.fill(cache[i], -1); // -1 表示没有访问过
        return dfs(0, 1);
    }

    private int dfs(int i, int m) {
        if (i + m * 2 >= s.length) return s[i];
        if (cache[i][m] != -1) return cache[i][m];
        int mn = Integer.MAX_VALUE;
        for (int x = 1; x <= m * 2; ++x)
            mn = Math.min(mn, dfs(i + x, Math.max(m, x)));
        return cache[i][m] = s[i] - mn;
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int stoneGameII(vector<int> &s) {
        int n = s.size();
        for (int i = n - 2; i >= 0; --i)
            s[i] += s[i + 1]; // 后缀和

        int cache[n][(n + 1) / 4 + 1];
        memset(cache, -1, sizeof(cache)); // -1 表示没有访问过
        function<int(int, int)> dfs = [&](int i, int m) -> int {
            if (i + m * 2 >= n) return s[i];
            int &res = cache[i][m];
            if (res != -1) return res;
            int mn = INT_MAX;
            for (int x = 1; x <= m * 2; ++x)
                mn = min(mn, dfs(i + x, max(m, x)));
            return res = s[i] - mn;
        };
        return dfs(0, 1);
    }
};
```

* [sol2-Go]

```go
func stoneGameII(s []int) int {
    n := len(s)
    for i := n - 2; i >= 0; i-- {
        s[i] += s[i+1] // 后缀和
    }

    cache := make([][]int, n-1)
    for i := range cache {
        cache[i] = make([]int, (n+1)/4+1)
        for j := range cache[i] {
            cache[i][j] = -1 // -1 表示没有访问过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, m int) int {
        if i+m*2 >= n {
            return s[i]
        }
        v := &cache[i][m]
        if *v != -1 {
            return *v
        }
        mn := math.MaxInt
        for x := 1; x <= m*2; x++ {
            mn = min(mn, dfs(i+x, max(m, x)))
        }
        res := s[i] - mn
        *v = res
        return res
    }
    return dfs(0, 1)
}

func min(a, b int) int { if b < a { return b }; return a }
func max(a, b int) int { if b > a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(n^3)$。记忆化后，每个状态只会计算一次，因此时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题中状态个数等于 $O(n^2)$，而单个状态的计算时间为 $O(n)$，因此时间复杂度为 $O(n^3)$。
- 空间复杂度：$O(n^2)$。记忆化需要存储 $O(n^2)$ 个状态。

# 第三步：1比1翻译成递推

根据 [视频](https://www.bilibili.com/video/BV1Xj411K7oF/) 中讲的，我们可以去掉递归中的「递」，只保留「归」的部分，即自底向上计算。

做法：

- $\textit{dfs}$ 改成 $f$ 数组；
- 递归改成循环（每个参数都对应一层循环）；
- 递归边界改成 $f$ 数组的初始值。由于本题的边界比较复杂，直接在递推中计算。

代码实现时，可以一边计算 $f$，一边计算后缀和。

### 答疑

**问**：为什么一定要倒序循环？

**答**：在记忆化搜索中，我们从起点 $(0,1)$ 出发向下「递」，此时 $i$ 不断变大；「归」就是从叶子出发向着起点计算，此时 $i$ 不断变小。所以要改成递推（只有「归」），$i$ 必须从大到小计算。对于 $M$ 来说正序逆序都可以，因为我们是从 $f[i+x][]$ 转移来的，无论先算哪个 $M$ 都是正确的。

**问**：为什么 $f$ 数组第二个维度的大小比 $\textit{cache}$ 的要大？

**答**：记忆化搜索没有把递归边界记录进去，而递推为了代码实现方便，把递归边界也记录到了数组中。

**问**：为什么 $M$ 循环到了 $\left\lfloor\dfrac{i}{2}\right\rfloor+1$？

**答**：极端情况下，每次都拿满 $2M$ 堆，有 $i=2+4+8+\cdots+M=2M-2$；不是这种极端情况的话，$i\ge 2M-2$，整理得到 $M\le\left\lfloor\dfrac{i+2}{2}\right\rfloor=\left\lfloor\dfrac{i}{2}\right\rfloor+1$。

* [sol3-Python3]

```py
class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        s, n = 0, len(piles)
        f = [[0] * (n + 1) for _ in range(n)]
        for i in range(n - 1, -1, -1):
            s += piles[i]
            for m in range(1, i // 2 + 2):
                if i + m * 2 >= n:
                    f[i][m] = s
                else:
                    f[i][m] = s - min(f[i + x][max(m, x)] for x in range(1, m * 2 + 1))
        return f[0][1]
```

* [sol3-Java]

```java
class Solution {
    public int stoneGameII(int[] piles) {
        int s = 0, n = piles.length;
        int[][] f = new int[n][n + 1];
        for (int i = n - 1; i >= 0; --i) {
            s += piles[i];
            for (int m = 1; m <= i / 2 + 1; ++m) {
                if (i + m * 2 >= n) f[i][m] = s;
                else {
                    int mn = Integer.MAX_VALUE;
                    for (int x = 1; x <= m * 2; ++x)
                        mn = Math.min(mn, f[i + x][Math.max(m, x)]);
                    f[i][m] = s - mn;
                }
            }
        }
        return f[0][1];
    }
}
```

* [sol3-C++]

```cpp
class Solution {
public:
    int stoneGameII(vector<int> &piles) {
        int s = 0, n = piles.size(), f[n][n + 1];
        for (int i = n - 1; i >= 0; --i) {
            s += piles[i];
            for (int m = 1; m <= i / 2 + 1; ++m) {
                if (i + m * 2 >= n) f[i][m] = s;
                else {
                    int mn = INT_MAX;
                    for (int x = 1; x <= m * 2; ++x)
                        mn = min(mn, f[i + x][max(m, x)]);
                    f[i][m] = s - mn;
                }
            }
        }
        return f[0][1];
    }
};
```

* [sol3-Go]

```go
func stoneGameII(piles []int) int {
    n := len(piles)
    f := make([][]int, n)
    for i := range f {
        f[i] = make([]int, n+1)
    }
    for i, s := n-1, 0; i >= 0; i-- {
        s += piles[i]
        for m := 1; m <= i/2+1; m++ {
            if i+m*2 >= n {
                f[i][m] = s
            } else {
                mn := math.MaxInt
                for x := 1; x <= m*2; x++ {
                    mn = min(mn, f[i+x][max(m, x)])
                }
                f[i][m] = s - mn
            }
        }
    }
    return f[0][1]
}

func min(a, b int) int { if b < a { return b }; return a }
func max(a, b int) int { if b > a { return b }; return a }
```

### 复杂度分析

同第二步。

### 题单：博弈类 DP

- [877. 石子游戏](https://leetcode.cn/problems/stone-game/)
- [1140. 石子游戏 II](https://leetcode.cn/problems/stone-game-ii/)
- [1406. 石子游戏 III](https://leetcode.cn/problems/stone-game-iii/)
- [375. 猜数字大小 II](https://leetcode.cn/problems/guess-number-higher-or-lower-ii/)
- [464. 我能赢吗](https://leetcode.cn/problems/can-i-win/)
- [486. 预测赢家](https://leetcode.cn/problems/predict-the-winner/)
- [1025. 除数博弈](https://leetcode.cn/problems/divisor-game/)

---

欢迎关注【biIibiIi@灵茶山艾府】，每周更新算法教学视频~
