## 区间 DP

定义 $f[l][r]$ 为考虑将 $(l, r)$ 范围内（不包含 `l` 和 `r` 边界）的气球消耗掉，所能取得的最大价值。

根据题意，我们可以对 `nums` 进行扩充，将其从长度为 $n$ 的 `nums` 变为长度 $n + 2$ 的 `arr`，其中 $arr[1...n]$ 对应了原数组 `nums`，而 $arr[0] = arr[n + 1] = 1$。

此时易知 $f[0][n + 1]$ 即是答案，不失一般性考虑 $f[l][r]$ 该如何转移，假设在 $(l, r)$ 范围内最后剩下的气球的编号为 $k$，此时的 $f[l][r]$ 由「以 $k$ 为分割点的两端所产生的价值」和「消耗 $k$ 本身带来的价值」两部分组成：

$$
f[l][r] = \max(f[l][k] + f[k][r] + arr[l] \times arr[k] \times arr[r]), k \in (l, r)
$$

为了确保转移能够顺利进行，我们需要确保在计算 $f[l][r]$ 的时候，区间长度比其小的 $f[l][k]$ 和 $f[k][r]$ 均被计算。

因此我们可以采用先枚举区间长度 `len`，然后枚举区间左端点 `l`（同时直接算得区间右端点 `r`）的方式来做。

代码：

* []

```Java
class Solution {
    public int maxCoins(int[] nums) {
        int n = nums.length;
        int[] arr = new int[n + 2];
        arr[0] = arr[n + 1] = 1;
        for (int i = 1; i <= n; i++) arr[i] = nums[i - 1];
        int[][] f = new int[n + 2][n + 2];
        for (int len = 3; len <= n + 2; len++) {
            for (int l = 0; l + len - 1 <= n + 1; l++) {
                int r = l + len - 1;
                for (int k = l + 1; k <= r - 1; k++) {
                    f[l][r] = Math.max(f[l][r], f[l][k] + f[k][r] + arr[l] * arr[k] * arr[r]);
                }
            }
        }
        return f[0][n + 1];
    }
}
```

* []

```TypeScript
function maxCoins(nums: number[]): number {
    const n = nums.length
    const arr = new Array<number>(n + 2).fill(1)
    for (let i = 1; i <= n; i++) arr[i] = nums[i - 1]
    const f = new Array<Array<number>>(n + 2)
    for (let i = 0; i < n + 2; i++) f[i] = new Array<number>(n + 2).fill(0)
    for (let len = 3; len <= n + 2; len++) {
        for (let l = 0; l + len - 1 <= n + 1; l++) {
            const r = l + len - 1
            for (let k = l + 1; k <= r - 1; k++) {
                f[l][r] = Math.max(f[l][r], f[l][k] + f[k][r] + arr[l] * arr[k] * arr[r])
            }
        }
    }
    return f[0][n + 1]
}
```

* 时间复杂度：$O(n^3)$
* 空间复杂度：$O(n^2)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://acoier.com/oimg/gzh-qrcode.webp)，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
